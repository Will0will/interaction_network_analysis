regex_match(annotation, "[.*]+")
annotation
regex_match(annotation, ".*+\[")
regex_match(annotation, ".*+\\[")
regex_match(annotation, ".*+\[")
annotation
length(annotation)
names(annotation) == vertex_names
uniprot_annotation_retrival_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?protein_ids ?types ?comments ?descriptions
WHERE{
VALUES ?proteins { ", values , " }
VALUES ?db { <http://purl.uniprot.org/database/KEGG> }
?proteins a term:protein .
?proteins dc:identifier ?protein_ids .
OPTIONAL{
?transcripts so:translates_to ?proteins .
?transcripts so:transcribed_from ?genes .
?genes dc:description ?descriptions .
OPTIONAL{
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos core:annotation ?annotations .
?annotations rdf:type ?types ;
rdfs:comment ?comments .
}
}
}")
return(query)
}
protein_URIs <- paste0("protein:", vertex_names)
unip_annotation_nodes <- data_require(uniprot_annotation_retrival_query_make, list(protein_URIs), endpoint)
# data clean for annotation table
patterns <- c(".*", "[A-Z|a-z]+_[A-Z|a-z|_]+", ".*", ".*")
table(unip_annotation_nodes$types)[order(table(unip_annotation_nodes$types))]
annotation <- tapply(unip_annotation_nodes$description, INDEX = unip_annotation_nodes$protein_ids, unique)
annotation
unip_annotation_nodes[unip_annotation_nodes$protein_ids == "unip_annotation_nodes", ]
unip_annotation_nodes[unip_annotation_nodes$protein_ids == "AT5G63420.1", ]
unip_annotation_nodes[unip_annotation_nodes$protein_ids == "AT5G63420.1", ]
uniprot_annotation_retrival_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?protein_ids ?types ?comments ?descriptions
WHERE{
VALUES ?proteins { ", values , " }
VALUES ?db { <http://purl.uniprot.org/database/KEGG> }
?proteins a term:protein .
?proteins dc:identifier ?protein_ids .
OPTIONAL{
?transcripts so:translates_to ?proteins .
?transcripts so:transcribed_from ?genes .
?genes dc:description ?descriptions .
}
OPTIONAL{
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos core:annotation ?annotations .
?annotations rdf:type ?types ;
rdfs:comment ?comments .
}
}")
return(query)
}
uniprot_annotation_retrival_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?proteins ?descriptions
WHERE{
{
VALUES ?proteins { ", values , " }
?proteins dc:identifier ?protein_ids .
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos dc:description ?descriptions .
?uniprot_annos a core:Protein .
} UNION {
VALUES ?proteins { ", values , " }
?proteins dc:identifier ?protein_ids .
?transcripts so:translates_to ?proteins .
?transcripts so:transcribed_from ?genes .
?genes dc:description ?descriptions .
}
}")
return(query)
}
unip_annotation_nodes <- data_require(uniprot_annotation_retrival_query_make, list(protein_URIs), endpoint)
uniprot_annotation_retrival_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?proteins ?descriptions
WHERE{
VALUES ?proteins { ", values , " }
{
?proteins dc:identifier ?protein_ids .
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos dc:description ?descriptions .
?uniprot_annos a core:Protein .
} UNION {
?proteins dc:identifier ?protein_ids .
?transcripts so:translates_to ?proteins .
?transcripts so:transcribed_from ?genes .
?genes dc:description ?descriptions .
}
}")
return(query)
}
protein_URIs <- paste0("protein:", vertex_names)
unip_annotation_nodes <- data_require(uniprot_annotation_retrival_query_make, list(protein_URIs), endpoint)
unip_annotation_nodes
View(unip_annotation_nodes )
protein_descriptions_nodes[protein_descriptions_nodes$protein_ids == "AT5G63420.1", ]
View(protein_descriptions_nodes )
protein_descriptions_nodes <- data_require(description_for_proteins_query_making, list(protein_URIs), endpoint)
View(protein_descriptions_nodes )
description_for_proteins_query_making <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?proteins ?descriptions
WHERE{
VALUES ?proteins { ", values , " }
{
?proteins dc:identifier ?protein_ids .
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos dc:description ?descriptions .
?uniprot_annos a core:Protein .
} UNION {
?proteins dc:identifier ?protein_ids .
?transcripts so:translates_to ?proteins .
?transcripts so:transcribed_from ?genes .
?genes dc:description ?descriptions .
}
}")
return(query)
}
description_for_proteins_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?proteins ?descriptions
WHERE{
VALUES ?proteins { ", values , " }
{
?proteins dc:identifier ?protein_ids .
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos dc:description ?descriptions .
?uniprot_annos a core:Protein .
} UNION {
?proteins dc:identifier ?protein_ids .
?transcripts so:translates_to ?proteins .
?transcripts so:transcribed_from ?genes .
?genes dc:description ?descriptions .
}
}")
return(query)
}
protein_URIs <- paste0("protein:", vertex_names)
protein_descriptions_nodes <- data_require(description_for_proteins_query_make, list(protein_URIs), endpoint)
View(protein_descriptions_nodes )
# data clean for annotation table
patterns <- c("[A-Z|a-z]+_[A-Z|a-z|_]+", ".*")
protein_descriptions_nodes <- regex_match_map(data_frame = protein_descriptions_nodes, regex_vec = patterns)
protein_descriptions_nodes
table(protein_descriptions_nodes$types)[order(table(protein_descriptions_nodes$types))]
annotation <- tapply(protein_descriptions_nodes$description, INDEX = protein_descriptions_nodes$protein_ids, unique)
protein_descriptions_nodes[protein_descriptions_nodes$protein_ids == "AT5G63420.1", ]
protein_descriptions_nodes <- data_require(description_for_proteins_query_make, list(protein_URIs), endpoint)
View(protein_descriptions_nodes )
# data clean for annotation table
patterns <- c("[A-Z|a-z]+_[A-Z|a-z|_]+", ".*")
regex_match_map(data_frame = protein_descriptions_nodes, regex_vec = patterns)
description_for_proteins_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?protein_ids ?descriptions
WHERE{
VALUES ?proteins { ", values , " }
?proteins dc:identifier ?protein_ids .
{
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos dc:description ?descriptions .
?uniprot_annos a core:Protein .
} UNION {
?transcripts so:translates_to ?proteins .
?transcripts so:transcribed_from ?genes .
?genes dc:description ?descriptions .
}
}")
return(query)
}
protein_descriptions_nodes <- data_require(description_for_proteins_query_make, list(protein_URIs), endpoint)
View(protein_descriptions_nodes )
annotation <- tapply(protein_descriptions_nodes$description, INDEX = protein_descriptions_nodes$protein_ids, unique)
annotation
length(annotation)
<http://rdf.ebi.ac.uk/resource/ensembl.protein/AT5G41820.1>
length(vertex_names)
annotation == NA
annotation
NA %in% annotation
length(vertex_names)
length(annotation)
vertex_names[vertex_names %in% names(annotation)]
vertex_names[!vertex_names %in% names(annotation)]
description_for_proteins_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?protein_ids ?descriptions
WHERE{
VALUES ?proteins { ", values , " }
?proteins dc:identifier ?protein_ids .
{
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos dc:description ?descriptions .
?uniprot_annos a core:Protein .
} UNION {
?transcripts (core:translatedTo | so:translates_to) ?proteins .
?transcripts (core:transcribedFrom | so:transcribed_from) ?genes .
?genes dc:description ?descriptions .
}
}")
return(query)
}
protein_descriptions_nodes <- data_require(description_for_proteins_query_make, list(protein_URIs), endpoint)
annotation <- tapply(protein_descriptions_nodes$description, INDEX = protein_descriptions_nodes$protein_ids, unique)
annotation
length(annotation)
length(vertex_names)
vertex_names[!vertex_names %in% names(annotation)]
description_for_proteins_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix transcript: <http://rdf.ebi.ac.uk/resource/ensembl.transcript/>
SELECT DISTINCT ?protein_ids ?descriptions
WHERE{
VALUES ?transcripts { ", values , " }
?transcripts (core:translatedTo | so:translates_to) ?proteins .
?proteins dc:identifier ?protein_ids .
{
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos dc:description ?descriptions .
?uniprot_annos a core:Protein .
} UNION {
?transcripts (core:transcribedFrom | so:transcribed_from) ?genes .
?genes dc:description ?descriptions .
}
}")
return(query)
}
protein_URIs <- paste0("transcript:", vertex_names)
protein_descriptions_nodes <- data_require(description_for_proteins_query_make, list(protein_URIs), endpoint)
protein_descriptions_nodes
protein_descriptions_nodes[protein_descriptions_nodes$protein_ids == "AT5G63420.1", ]
annotation <- tapply(protein_descriptions_nodes$description, INDEX = protein_descriptions_nodes$protein_ids, unique)
length(annotation)
length(vertex_names)
description_for_proteins_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?protein_ids ?descriptions
WHERE{
VALUES ?proteins { ", values , " }
?proteins dc:identifier ?protein_ids .
{
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos dc:description ?descriptions .
?uniprot_annos a core:Protein .
} UNION {
?transcripts (core:translatedTo | so:translates_to) ?proteins .
?transcripts (core:transcribedFrom | so:transcribed_from) ?genes .
?genes dc:description ?descriptions .
}
}")
return(query)
}
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?protein_ids ?descriptions
WHERE{
VALUES ?proteins { ", values , " }
?proteins dc:identifier ?protein_ids .
OPTIONAL{
{
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos dc:description ?descriptions .
?uniprot_annos a core:Protein .
} UNION {
?transcripts (core:translatedTo | so:translates_to) ?proteins .
?transcripts (core:transcribedFrom | so:transcribed_from) ?genes .
?genes dc:description ?descriptions .
}
}
}")
description_for_proteins_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?protein_ids ?descriptions
WHERE{
VALUES ?proteins { ", values , " }
?proteins dc:identifier ?protein_ids .
OPTIONAL{
{
?proteins (term:SEQUENCE_MATCH|term:CHECKSUM) ?uniprot_annos .
?uniprot_annos dc:description ?descriptions .
?uniprot_annos a core:Protein .
} UNION {
?transcripts (core:translatedTo | so:translates_to) ?proteins .
?transcripts (core:transcribedFrom | so:transcribed_from) ?genes .
?genes dc:description ?descriptions .
}
}
}")
return(query)
}
protein_URIs <- paste0("protein:", vertex_names)
protein_descriptions_nodes <- data_require(description_for_proteins_query_make, list(protein_URIs), endpoint)
protein_descriptions_nodes
annotation <- tapply(protein_descriptions_nodes$description, INDEX = protein_descriptions_nodes$protein_ids, unique)
annotation
length(annotation)
length(vertex_names)
names(annotation) == vertex_names
match(names(annotation), vertex_names)
names(annotation)
names(annotation)[217]
vertex_names[1]
vertex_names[217]
names(annotation)[1]
annotation[match(vertex_names, names(annotation))]
annotation <- annotation[match(vertex_names, names(annotation))]
vertex_names[!vertex_names %in% names(annotation)]
