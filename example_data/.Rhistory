# query the protein encoded by genes located in region 1
?genes_1_transcripts so:transcribed_from ?genes_1 .
?genes_1_transcripts  so:translates_to ?proteins_1 .
# query the protein encoded by pot genes located in region 2
?genes_2_transcripts so:transcribed_from ?genes_2 .
?genes_2_transcripts  so:translates_to ?proteins_2 .
# query the interactions between proteins_1 and proteins_2
?proteins_1 (obo:RO_0002434|^obo:RO_0002434) ?proteins_2 .
?proteins_1 sio:SIO_000062 ?interaction .
?proteins_2 sio:SIO_000062 ?interaction .
?interaction sio:SIO_000300 ?weights .
}")
return(query)
}
# assemble the query bussiness:
data_require <- function(query_function, calls, endpoint) {
# Call the function query make function and get the results from the endpoints
#
# Args:
#  query_function: one of the query making functions defined above.
#  calls: a list containing the arguments for each parameters required by the 'query_function' .
#  endpoint: the endpoint url in string where the triplets are stored.
#
# Return:
#  A matrix with queried table.
require(SPARQL)
query <- do.call(what = query_function, args = as.list(calls))
results <- SPARQL(endpoint , query)
res_df <- results$results
return(res_df)
}
regex_match <- function(vec, pattern) {
# Match the text with reg express. only text matched with the expression will be return.
#
# Args:
#   vec: the vector containing strings for pattern matching
#   pattern: the regular expression that will be appied to all the strings in the input vector.
#
# Returns:
#  A vector containing the results one on one to the the input vector
pos <- regexec(pattern = pattern, text = vec, ignore.case = T)
matches <- regmatches(x = vec, m = pos)
results <- sapply(1:length(matches), function(i) {
matches[[i]][1]
})
return(results)
}
regex_match_map <- function(data_frame, regex_vec) {
# Apply each column a regular expression formula to extract information out
#
# Args:
#  data_frame: a dataframe containing the strings
#  regex_vec: the vector of the same length as the data_frame containig the regular
#  expressions for each colum.
#
# Returns:
#  A dataframe containing the exatracted strings accoding to the reg ex applied to each column.
if (length(data_frame) != length(regex_vec)) {
stop("Arguments data_frame and regex_vec have invalid lengths: ",
length(data_frame), " and ", length(regex_vec), ".")
}
data_frame[,] <- sapply(1:length(data_frame), FUN = function(ind) {
regex_match(vec = data_frame[, ind], pattern = regex_vec[ind])  # defined in the same environment
})
return(data_frame)
}
# the list of gene is an example:
list_of_genes <- read.csv(file = "list_of_gene.txt", header = T, stringsAsFactors = F)
genes <- unlist(list_of_genes, use.names = F)
URIs <- paste0("gene:", genes)
# designate the endpoint and the calls query:
endpoint <- "http://localhost:8890/sparql"
calls <- list(URIs, 5, 15650000, 23850000)
interactions <- data_require(potential_interaction_query_make, calls, endpoint)
# data preprocessing:
patterns <- c("AT[0-9]G[0-9|.]+", "AT[0-9]G[0-9|.]+", "^chromosome [0-9]", "[0-9]+")
interactions <- regex_match_map(data_frame = interactions, regex_vec = patterns)
interactions[, 3] <- as.factor(interactions[, 3])
interactions[, 4] <- as.numeric(interactions[, 4])
cutoff <- quantile(interactions$weights, probs = 0.25)  # use the third quantile as the cutoff
cutoff <- 0
links <- interactions[, c(1, 2, 4)][interactions$weights > cutoff, ]
g <- graph_from_data_frame(d = links, directed = F)
# view the vertexes inside the network
vertex_names <- V(g)$name
protein_URIs <- paste0("protein:", vertex_names)
unip_annotation_nodes <- data_require(uniprot_annotation_retrival_query_make, list(protein_URIs), endpoint)
kegg_annotation_nodes <- data_require(KEGG_annotation_retrival_query_make, list(protein_URIs), endpoint)
# data clean for annotation table
patterns <- c(".*", "[A-Z|a-z]+_[A-Z|a-z|_]+", ".*")
unip_annotation_nodes <- regex_match_map(data_frame = unip_annotation_nodes, regex_vec = patterns)
patterns <- c(".*", "map[0-9]+", "[A-Z][^\"]+")
kegg_annotation_nodes <- regex_match_map(data_frame = kegg_annotation_nodes, regex_vec = patterns)
g_community <- edge.betweenness.community(g)
# specify the parameters for the network visulization:
#  shapes circle for target genes and sqare for potential genes:
shapes() #all shapes available
shape_pos <- vertex_names %in% links$tar_proteins
v_shapes <- c("circle",  "square")[shape_pos+1]  # diffrent shape for target and potential genes
# colors stands for the pathway evolved:
color_vec <- kegg_annotation_nodes$pw_des
color_vec[is.na(color_vec)] <- "Unknown"
color_list <- tapply(X = color_vec, INDEX = kegg_annotation_nodes$protein_ids, c)
#color_list <- sapply(color_list, as.factor)
color_list <- color_list[match(vertex_names, names(color_list))]
vex_values <- sapply(color_list, function(x) {
rep(1,length(x))
})
chars <- sapply(color_list, function(x) {
x[1]
})
chars <- as.factor(chars)
plot(g, vertex.shape = v_shapes,
vertex.color=chars,
vertex.size = 7,
vertex.label=NA)
unip_annotation_nodes
vertex_names
length(vertex_names)
table(unip_annotation_nodes$types)[order(table(unip_annotation_nodes$types))]
functional_anno <- unip_annotation_nodes[unip_annotation_nodes$types == "Function_Annotation", ]
btwness <- as.numeric(betw_centralities)*100
btwness[btwness < 1] <- 0.1
functional_anno <- map_a_to_b(a = functional_anno, ind_a = functional_anno$protein_ids, ind_b = vertex_names)
# annotation <- gsub("\\. ", "\\. \n", functional_anno$comments)
nodes <- cbind.data.frame(vertex_names,  group = membership, annotation = functional_anno$comments, btwness)
nodes$annotation <- gsub("\\.", "\\.\r", functional_anno$comments)
# Calculate the betweeness centrality
betw_centralities <- betweenness(g, v = V(g), directed = F, weights = NULL, normalized = T)
betw_centralities <- betw_centralities[order(betw_centralities, decreasing = T)]
betw_cutoff <- quantile(betw_centralities, probs = 0.8)
table(unip_annotation_nodes$types)[order(table(unip_annotation_nodes$types))]
functional_anno <- unip_annotation_nodes[unip_annotation_nodes$types == "Function_Annotation", ]
btwness <- as.numeric(betw_centralities)*100
btwness[btwness < 1] <- 0.1
functional_anno <- map_a_to_b(a = functional_anno, ind_a = functional_anno$protein_ids, ind_b = vertex_names)
map_a_to_b <- function(a, ind_a, ind_b){
if (is.data.frame(a) | is.matrix(a)){
result <- a[match(ind_b, ind_a), ]
} else {
result <- a[match(ind_b, ind_a)]
}
return(result)
}
functional_anno <- map_a_to_b(a = functional_anno, ind_a = functional_anno$protein_ids, ind_b = vertex_names)
# annotation <- gsub("\\. ", "\\. \n", functional_anno$comments)
nodes <- cbind.data.frame(vertex_names,  group = membership, annotation = functional_anno$comments, btwness)
nodes$annotation <- gsub("\\.", "\\.\r", functional_anno$comments)
# make the links
links <- interactions[, c(1, 2, 4)][interactions$weights > cutoff, ]
functional_anno <- map_a_to_b(a = functional_anno, ind_a = functional_anno$protein_ids, ind_b = vertex_names)
# annotation <- gsub("\\. ", "\\. \n", functional_anno$comments)
nodes <- cbind.data.frame(vertex_names,  group = membership, annotation = functional_anno$comments, btwness)
functional_anno <- unip_annotation_nodes[unip_annotation_nodes$types == "Function_Annotation", ]
btwness <- as.numeric(betw_centralities)*100
btwness[btwness < 1] <- 0.1
functional_anno <- map_a_to_b(a = functional_anno, ind_a = functional_anno$protein_ids, ind_b = vertex_names)
# annotation <- gsub("\\. ", "\\. \n", functional_anno$comments)
nodes <- cbind.data.frame(vertex_names,  group = membership, annotation = functional_anno$comments, btwness)
functional_anno
functional_anno$comments
membership
g_membership <- g_community$membership
universe_labels <- kegg_annotation_nodes$pw_des
# annotation <- gsub("\\. ", "\\. \n", functional_anno$comments)
nodes <- cbind.data.frame(vertex_names,  group = g_membership, annotation = functional_anno$comments, btwness)
nodes$annotation <- gsub("\\.", "\\.\r", functional_anno$comments)
# make the links
links <- interactions[, c(1, 2, 4)][interactions$weights > cutoff, ]
links$pot_proteins <- match(links$pot_proteins, vertex_names) - 1
links$tar_proteins <- match(links$tar_proteins, vertex_names) - 1
links$weights <- links$weights / 1000
calls <- list(
# data frame inputs
Links = links,  # linkage dataframe
Nodes = nodes,  # the characters of the nodes
# explanatory inputs:
Source = "pot_proteins",  # source of the linkages
Target = "tar_proteins",  #  targets of the linkages
Value = "weights",  # thickness of the edges in the graph
NodeID = "annotation",  # text shown in the nodes
Group = "group",  # groups of the nodes
Nodesize = "btwness" ,
# aesthetics inputs:
fontFamily="Arial",
fontSize = 10,
linkColour="black",
# colourScale,
# linkWidth,
charge = -13, # how strong the nodes should gather or repel to each other
opacity = 0.9,
legend=T,
arrows=T,
bounded=F,  # whether turn on the boundaries for the plots
opacityNoHover=200, # the degree of opacity when the mouse is not suspending on the nodes
zoom = T  # allow zoom(double click to )
)
do.call(what = forceNetwork, args = calls)
library(networkD3)
do.call(what = forceNetwork, args = calls)
nodes$annotation
nodes$annotation <- gsub("\\.", "\\.\n", functional_anno$comments)
# make the links
links <- interactions[, c(1, 2, 4)][interactions$weights > cutoff, ]
links$pot_proteins <- match(links$pot_proteins, vertex_names) - 1
links$tar_proteins <- match(links$tar_proteins, vertex_names) - 1
links$weights <- links$weights / 1000
calls <- list(
# data frame inputs
Links = links,  # linkage dataframe
Nodes = nodes,  # the characters of the nodes
# explanatory inputs:
Source = "pot_proteins",  # source of the linkages
Target = "tar_proteins",  #  targets of the linkages
Value = "weights",  # thickness of the edges in the graph
NodeID = "annotation",  # text shown in the nodes
Group = "group",  # groups of the nodes
Nodesize = "btwness" ,
# aesthetics inputs:
fontFamily="Arial",
fontSize = 10,
linkColour="black",
# colourScale,
# linkWidth,
charge = -13, # how strong the nodes should gather or repel to each other
opacity = 0.9,
legend=T,
arrows=T,
bounded=F,  # whether turn on the boundaries for the plots
opacityNoHover=200, # the degree of opacity when the mouse is not suspending on the nodes
zoom = T  # allow zoom(double click to )
)
do.call(what = forceNetwork, args = calls)
nodes$annotation
plot(nodes$annotation)
cat(nodes$annotation)
nodes$annotation <- cat(gsub("\\.", "\\.\n", functional_anno$comments))
nodes$annotation
cat(gsub("\\.", "\\.\n", functional_anno$comments))
sapply(annotation, cat)
annotation <- gsub("\\. ", "\\. \n", functional_anno$comments)
sapply(annotation, cat)
unlist(sapply(annotation, cat), use.names = F)
sapply(annotation, cat)[1]
sapply(annotation, cat)
cat(annotation[1])
a <- cat(annotation[1])
a
nodes$annotation <- gsub("\\.", "\\.\n", functional_anno$comments)
calls <- list(
# data frame inputs
Links = links,  # linkage dataframe
Nodes = nodes,  # the characters of the nodes
# explanatory inputs:
Source = "pot_proteins",  # source of the linkages
Target = "tar_proteins",  #  targets of the linkages
Value = "weights",  # thickness of the edges in the graph
NodeID = "annotation",  # text shown in the nodes
Group = "group",  # groups of the nodes
Nodesize = "btwness" ,
# aesthetics inputs:
fontFamily="Arial",
fontSize = 10,
linkColour="black",
# colourScale,
# linkWidth,
charge = -13, # how strong the nodes should gather or repel to each other
opacity = 0.9,
legend=T,
arrows=T,
bounded=F,  # whether turn on the boundaries for the plots
opacityNoHover=200, # the degree of opacity when the mouse is not suspending on the nodes
zoom = T  # allow zoom(double click to )
)
do.call(what = forceNetwork, args = calls)
bquote(atop("first line",
"second line" ~ x ^ 2))
nodes$annotation <- gsub("\\.", "\\.\\\n", functional_anno$comments)
# make the links
links <- interactions[, c(1, 2, 4)][interactions$weights > cutoff, ]
links$pot_proteins <- match(links$pot_proteins, vertex_names) - 1
links$tar_proteins <- match(links$tar_proteins, vertex_names) - 1
links$weights <- links$weights / 1000
calls <- list(
# data frame inputs
Links = links,  # linkage dataframe
Nodes = nodes,  # the characters of the nodes
# explanatory inputs:
Source = "pot_proteins",  # source of the linkages
Target = "tar_proteins",  #  targets of the linkages
Value = "weights",  # thickness of the edges in the graph
NodeID = "annotation",  # text shown in the nodes
Group = "group",  # groups of the nodes
Nodesize = "btwness" ,
# aesthetics inputs:
fontFamily="Arial",
fontSize = 10,
linkColour="black",
# colourScale,
# linkWidth,
charge = -13, # how strong the nodes should gather or repel to each other
opacity = 0.9,
legend=T,
arrows=T,
bounded=F,  # whether turn on the boundaries for the plots
opacityNoHover=200, # the degree of opacity when the mouse is not suspending on the nodes
zoom = T  # allow zoom(double click to )
)
do.call(what = forceNetwork, args = calls)
a<-c(1,10)
b<-c(2,12)
amean<-mean(a)
bmean<-mean(b)
plot(a,b)
hght<-strheight("Here")
Lines=list("Here are the values",
"",
bquote(amean==.(amean)),
"and",
bquote(bmean==.(bmean)))
text(amean,bmean-(hght*1.5*seq(length(Lines))),do.call(expression,Lines),adj=c(0,0))
bquote(amean==.(amean))
do.call(expression,Lines)
bquote
bquote(amean==.(amean))
strsplit(functional_anno$comments, split = '\.')
strsplit(functional_anno$comments, split = '\\.')
unlist(strsplit(functional_anno$comments, split = '\\.'))
sapply(functional_anno$comments, function(x) strsplit(x, split = '\\.')[[1]])
sapply(functional_anno$comments, function(x) strsplit(x, split = '\\.'))
sapply(functional_anno$comments, function(x) strsplit(x, split = '\\.')[1])
strsplit(functional_anno$comments[1], split = '\\.')
strsplit(functional_anno$comments[1], split = '\\.')[[1]]
sapply(functional_anno$comments, function(x) strsplit(x, split = '\\.')[[1]])
lapply(functional_anno$comments, function(x) strsplit(x, split = '\\.')[[1]])
strsplit(functional_anno$comments, "\\.")
test <- strsplit(functional_anno$comments, "\\.")
test
test[1]
do.call(expression, test[1])
a <- do.call(expression, test[1])
sapply(test, function(x) {do.call(expression, x)})
test
sapply(test, function(x) {do.call(expression, list(x))})
sapply(test, function(x) {do.call(expression, list(x))})[1]
nodes$annotation <- sapply(test, function(x) {do.call(expression, list(x))})
calls <- list(
# data frame inputs
Links = links,  # linkage dataframe
Nodes = nodes,  # the characters of the nodes
# explanatory inputs:
Source = "pot_proteins",  # source of the linkages
Target = "tar_proteins",  #  targets of the linkages
Value = "weights",  # thickness of the edges in the graph
NodeID = "annotation",  # text shown in the nodes
Group = "group",  # groups of the nodes
Nodesize = "btwness" ,
# aesthetics inputs:
fontFamily="Arial",
fontSize = 10,
linkColour="black",
# colourScale,
# linkWidth,
charge = -13, # how strong the nodes should gather or repel to each other
opacity = 0.9,
legend=T,
arrows=T,
bounded=F,  # whether turn on the boundaries for the plots
opacityNoHover=200, # the degree of opacity when the mouse is not suspending on the nodes
zoom = T  # allow zoom(double click to )
)
do.call(what = forceNetwork, args = calls)
nodes$annotation <- gsub("\\.", "\\.\n", functional_anno$comments)
# make the links
links <- interactions[, c(1, 2, 4)][interactions$weights > cutoff, ]
links$pot_proteins <- match(links$pot_proteins, vertex_names) - 1
links$tar_proteins <- match(links$tar_proteins, vertex_names) - 1
links$weights <- links$weights / 1000
calls <- list(
# data frame inputs
Links = links,  # linkage dataframe
Nodes = nodes,  # the characters of the nodes
# explanatory inputs:
Source = "pot_proteins",  # source of the linkages
Target = "tar_proteins",  #  targets of the linkages
Value = "weights",  # thickness of the edges in the graph
NodeID = "annotation",  # text shown in the nodes
Group = "group",  # groups of the nodes
Nodesize = "btwness" ,
# aesthetics inputs:
fontFamily="Arial",
fontSize = 10,
linkColour="black",
# colourScale,
# linkWidth,
charge = -13, # how strong the nodes should gather or repel to each other
opacity = 0.9,
legend=T,
arrows=T,
bounded=F,  # whether turn on the boundaries for the plots
opacityNoHover=200, # the degree of opacity when the mouse is not suspending on the nodes
zoom = T  # allow zoom(double click to )
)
# change the default setting
# change the default setting
# calls["NodeID"] <- "vertex_names"
do.call(what = forceNetwork, args = calls)
strsplit(functional_anno$comments)
strsplit(functional_anno$comments, "\\.")
sapply(strsplit(functional_anno$comments, "\\."), function(x) {x[1]})
nodes$annotation <- sapply(strsplit(functional_anno$comments, "\\."), function(x) {x[1]})
# make the links
links <- interactions[, c(1, 2, 4)][interactions$weights > cutoff, ]
links$pot_proteins <- match(links$pot_proteins, vertex_names) - 1
links$tar_proteins <- match(links$tar_proteins, vertex_names) - 1
links$weights <- links$weights / 1000
calls <- list(
# data frame inputs
Links = links,  # linkage dataframe
Nodes = nodes,  # the characters of the nodes
# explanatory inputs:
Source = "pot_proteins",  # source of the linkages
Target = "tar_proteins",  #  targets of the linkages
Value = "weights",  # thickness of the edges in the graph
NodeID = "annotation",  # text shown in the nodes
Group = "group",  # groups of the nodes
Nodesize = "btwness" ,
# aesthetics inputs:
fontFamily="Arial",
fontSize = 10,
linkColour="black",
# colourScale,
# linkWidth,
charge = -13, # how strong the nodes should gather or repel to each other
opacity = 0.9,
legend=T,
arrows=T,
bounded=F,  # whether turn on the boundaries for the plots
opacityNoHover=200, # the degree of opacity when the mouse is not suspending on the nodes
zoom = T  # allow zoom(double click to )
)
do.call(what = forceNetwork, args = calls)
tapply(kegg_annotation_nodes$pw_des, kegg_annotation_nodes$protein_ids, c())
kegg_annotation_nodes$pw_des
kegg_annotation_nodes$protein_ids
tapply(kegg_annotation_nodes$pw_des, kegg_annotation_nodes$protein_ids, c)
tapply(kegg_annotation_nodes$pw_des, kegg_annotation_nodes$protein_ids, paste0)
tapply(kegg_annotation_nodes$pw_des, kegg_annotation_nodes$protein_ids, c)
tapply(kegg_annotation_nodes$pw_des, kegg_annotation_nodes$protein_ids, function(x){
pathes <- c()
pathes <- c(pathes, x)
})
})
tapply(kegg_annotation_nodes$pw_des, kegg_annotation_nodes$protein_ids, function(x){
pathes <- c()
pathes <- c(pathes, x)
paste(pathes, collapse = "\\")
})
paste(pathes, collapse = "\\")[1]
tapply(kegg_annotation_nodes$pw_des, kegg_annotation_nodes$protein_ids, function(x){
pathes <- c()
pathes <- c(pathes, x)
paste(pathes, collapse = "\\")
})[1]
tapply(kegg_annotation_nodes$pw_des, kegg_annotation_nodes$protein_ids, function(x){
pathes <- c()
pathes <- c(pathes, x)
paste(pathes, collapse = "; ")
})
tapply(kegg_annotation_nodes$pw_des, kegg_annotation_nodes$protein_ids, function(x){
pathes <- c()
pathes <- c(pathes, x)
paste(pathes, collapse = "; ")
})[1]
annotation <- tapply(kegg_annotation_nodes$pw_des, kegg_annotation_nodes$protein_ids, function(x){
pathes <- c()
pathes <- c(pathes, x)
paste(pathes, collapse = "; ")
})
# or
nodes$annotation <- annotation
# make the links
links <- interactions[, c(1, 2, 4)][interactions$weights > cutoff, ]
links$pot_proteins <- match(links$pot_proteins, vertex_names) - 1
links$tar_proteins <- match(links$tar_proteins, vertex_names) - 1
links$weights <- links$weights / 1000
calls <- list(
# data frame inputs
Links = links,  # linkage dataframe
Nodes = nodes,  # the characters of the nodes
# explanatory inputs:
Source = "pot_proteins",  # source of the linkages
Target = "tar_proteins",  #  targets of the linkages
Value = "weights",  # thickness of the edges in the graph
NodeID = "annotation",  # text shown in the nodes
Group = "group",  # groups of the nodes
Nodesize = "btwness" ,
# aesthetics inputs:
fontFamily="Arial",
fontSize = 10,
linkColour="black",
# colourScale,
# linkWidth,
charge = -13, # how strong the nodes should gather or repel to each other
opacity = 0.9,
legend=T,
arrows=T,
bounded=F,  # whether turn on the boundaries for the plots
opacityNoHover=200, # the degree of opacity when the mouse is not suspending on the nodes
zoom = T  # allow zoom(double click to )
)
do.call(what = forceNetwork, args = calls)
