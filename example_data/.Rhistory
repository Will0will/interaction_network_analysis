ft_res <- fisher.test(cross_table, alternative = "greater")$p.value
} else {
ft_res <- 1
}
return(ft_res)
}
enrichment_fisher_test_mass_apply <- function(cluster_vec, annotations_vec){
enrichment_fisher_test <- function(cluster_vec, annotation_vec, tar_cluster, tar_annotation) {
# Function to perform pathway enrichment analysis.
#
# Args:
#   cluster_vec: a vector containing which cluster a list of genes belong to
#   annotation_vec: a vector containing which functions a list of genes are annotated with
#   tar_cluster: the targeted cluster of genes
#   tar_annotation: indicate the functions to see if the targeted cluster of genes are overrepreseneted in it
#   using fisher's exact test.
#
# Return:
#  the result from fisher's exact test.
is_in_cluster <- cluster_vec == tar_cluster
is_in_pathway <- annotation_vec == tar_annotation
cross_table <- table(is_in_cluster, is_in_pathway)
if(dim(cross_table)[1] == dim(cross_table)[2]) {
ft_res <- fisher.test(cross_table, alternative = "greater")$p.value
} else {
ft_res <- 1
}
return(ft_res)
}
ft_res <- NULL
for (cluster in unique(cluster_vec)) {
cl <- makeCluster(4)
row_segs <- parLapply(cl, unique(annotations_vec), function(annotation){
enrichment_fisher_test(cluster_vec, annotations_vec, cluster, annotation)
})
row <- do.call(rbind, row_segs)
ft_res <- cbind(ft_res, unlist(row))
stopCluster(cl)
}
row.names(ft_res) <- unique(annotations_vec)
colnames(ft_res) <- paste0("cluster_", unique(cluster_vec))
return(as.data.frame(ft_res))
}
map_a_to_b <- function(a, ind_a, ind_b){
if (is.data.frame(a) | is.matrix(a)){
result <- a[match(ind_b, ind_a), ]
} else {
result <- a[match(ind_b, ind_a)]
}
return(result)
}
color_generator <- function(color_size) {
R <- sample(1:225, size = color_size) / 225
G <- sample(1:225, size = color_size) / 225
B <- sample(1:225, size = color_size) / 225
cols <- sapply(1:color_size, function(i) {
rgb(red=R[i], green=G[i], blue=B[i])
})
return(cols)
}
color_range_match <- function(vals, range_vec, color_gradients){
col_vec <- sapply(vals , function(x) {
pos <- which(range_vec < x)[length(which(range_vec < x))]
color_gradients[pos]
})
return(col_vec)
}
# MAIN:
g_membership <- g_community$membership
universe_labels <- kegg_annotation_nodes$pw_des
# map the cluster to the equival length to the pathway list:
mapped_membership <- map_a_to_b(a = g_membership,
ind_a = vertex_names,
ind_b = kegg_annotation_nodes$protein_ids)
# remove the NAs in the list
mapped_membership <- mapped_membership[!is.na(universe_labels)]
universe_labels <- universe_labels[!is.na(universe_labels)]
table(universe_labels)[order(table(universe_labels), decreasing = T)]
# carry out enrichment analysis
ft_res <- enrichment_fisher_test_mass_apply(mapped_membership, universe_labels)
p_adj_res <- ft_res
p_adj_res[,] <- p.adjust(unlist(p_adj_res), method = "BH")
# the results:
positions <- which(p_adj_res < 0.05, arr.ind = T)
cluster_results <- cbind(row.names(p_adj_res)[positions[, 1]], colnames(p_adj_res)[positions[, 2]])
# remove meaningless annotations
cluster_results <- cluster_results[names(cluster_results) != "Metabolic pathways"]
# plot:
#  generate the colors
color_size <- length(unique(g_membership))
col_for_cluster <- color_generator(color_size)
# shapes of the node:
shape_pos <- vertex_names %in% links$tar_proteins
v_shapes <- c("circle",  "square")[shape_pos+1] # target-square; potential-circle.
# visualization
plot(g, vertex.shape = v_shapes,
vertex.color=col_for_cluster[g_membership],
vertex.size = 7,
vertex.label=NA)
legend("topleft",
legend= names(cluster_results),
col = col_for_cluster[cluster_results],
bty = "n",
pch=20 ,
pt.cex = 1.5,
cex = 0.75,
text.col = col_for_cluster[cluster_results] ,
horiz = FALSE,
inset = c(0.1, 0.1))
# ================== GO =========================
g_membership <- g_community$membership
universe_labels <- go_annotation_nodes$go_terms
# map the cluster to the equival length to the pathway list:
mapped_membership <- map_a_to_b(a = g_membership,
ind_a = vertex_names,
ind_b = go_annotation_nodes$protein_ids)
# remove the NAs in the list
mapped_membership <- mapped_membership[!is.na(universe_labels)]
universe_labels <- universe_labels[!is.na(universe_labels)]
table(universe_labels)[order(table(universe_labels), decreasing = T)]
# carry out enrichment analysis
start_t = Sys.time()
ft_res <- enrichment_fisher_test_mass_apply(mapped_membership, universe_labels)
end_t = Sys.time()
print(end_t - start_t)
# the results:
# adjust the p-values to the
p_adj_res <- ft_res
p_adj_res[,] <- p.adjust(unlist(p_adj_res), method = "BH")
# the results:
cordi <- which(p_adj_res < 0.05, arr.ind = T)[, 2]
results <- colnames(p_adj_res)[cordi]
names(results) <- names(cordi)
descriptions <- go_annotation_nodes$go_descrips[match(names(results),  go_annotation_nodes$go_terms)]
View(cbind(descriptions, as.character(results), names(results)))
# go enrich visualiztion:
p_for_cluster_1 <- p_adj_res[,2]
top_20_p_vals <- p_for_cluster_1[order(p_for_cluster_1, decreasing = F)][1:50]
top_20_sig_gos <- row.names(p_adj_res)[order(p_for_cluster_1, decreasing = F)][1:50]
# query the hierachies:
go_URIs <- paste0("oboGo:", gsub(":", "_" ,top_20_sig_gos))
go_hierachy_visualiztion <- data_require(GO_hierarchy_retrival_query_make, list(go_URIs), endpoint)
# make links to visualize the results in hierarchy
links_go_enrich <- cbind.data.frame(from = paste(go_hierachy_visualiztion[, 1], go_hierachy_visualiztion[, 2], sep = "\n" ),
to = paste(go_hierachy_visualiztion[, 3], go_hierachy_visualiztion[, 4], sep = "\n" ))
g_go_hierachy <- graph_from_data_frame(d = links_go_enrich, directed = T)
V(g_go_hierachy)$label.cex <- 0.8
colors <- colorRampPalette(c("orange", "white"))(30)
ranges <- seq(0, 1, length.out = length(colors))
col_vec <- color_range_match(top_20_p_vals, ranges, colors)
plot(minimum.spanning.tree(g_go_hierachy),
vertex.color = col_vec
# , vertex.size = 22
)
uniprot_annotation_retrival_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?protein_ids ?types ?comments
WHERE{
VALUES ?proteins { ", values , " }
VALUES ?db { <http://purl.uniprot.org/database/KEGG> }
?proteins a term:protein .
?proteins dc:identifier ?protein_ids .
OPTIONAL{
?proteins term:SEQUENCE_MATCH ?uniprot_annos .
?uniprot_annos core:annotation ?annotations .
?annotations rdf:type ?types ;
rdfs:comment ?comments .
}
}")
return(query)
}
uniprot_annotation_retrival_query_make <- function(protein_URIs){
# Function to make the query for uniprot anotations of the input protein in URIs.
#
# Args:
#  protein_URIs: the URIs used for the proteining in the triplet store
#
# Return:
#  a query used for retrieving the uniprot anotations in strings
values <- paste0(protein_URIs, collapse = " ")  # make the vector as the input for the query
query <- paste0(
"prefix obo: <http://purl.obolibrary.org/obo/>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix term: <http://rdf.ebi.ac.uk/terms/ensembl/>
prefix dc: <http://purl.org/dc/elements/1.1/>
prefix faldo: <http://biohackathon.org/resource/faldo#>
prefix sio: <http://semanticscience.org/resource/>
prefix core: <http://purl.uniprot.org/core/>
prefix so: <http://purl.obolibrary.org/obo/so#>
prefix protein: <http://rdf.ebi.ac.uk/resource/ensembl.protein/>
SELECT DISTINCT ?protein_ids ?types ?comments
WHERE{
VALUES ?proteins { ", values , " }
?proteins a term:protein .
?proteins dc:identifier ?protein_ids .
OPTIONAL{
?proteins term:SEQUENCE_MATCH ?uniprot_annos .
?uniprot_annos core:annotation ?annotations .
?annotations rdf:type ?types ;
rdfs:comment ?comments .
}
}")
return(query)
}
protein_descriptions_nodes <- data_require(description_for_proteins_query_make, list(protein_URIs), endpoint)
protein_descriptions_nodes
unip_annotation_nodes <- data_require(uniprot_annotation_retrival_query_make, list(protein_URIs), endpoint)
unip_annotation_nodes
unip_annotation_nodes
vertex_names
unip_annotation_nodes
patterns <- c(".*", "[A-Z|a-z]+_[A-Z|a-z|_]+", ".*")
unip_annotation_nodes <- regex_match_map(data_frame = unip_annotation_nodes, regex_vec = patterns)
unip_annotation_nodes
protein_descriptions_nodes[protein_descriptions_nodes$protein_ids == "AT5G63420.1", ]
table(protein_descriptions_nodes$types)[order(table(protein_descriptions_nodes$types))]
annotation <- tapply(protein_descriptions_nodes$description, INDEX = protein_descriptions_nodes$protein_ids, unique)
annotation <- annotation[match(vertex_names, names(annotation))]
regex_match(annotation, ".*+")
annotation
unip_annotation_nodes
# if show the descriptions
# if wanna see the annotation in details
functional_anno <- unip_annotation_nodes[unip_annotation_nodes$types == "Function_Annotation", ]
functional_anno
functional_anno <- map_a_to_b(a = functional_anno, ind_a = functional_anno$protein_ids, ind_b = vertex_names)
# if show the descriptions
# if wanna see the annotation in details
View(functional_anno)
# if show the descriptions
# if wanna see the annotation in details
dim(unip_annotation_nodes)
unip_annotation_nodes$protein_ids
unique(unip_annotation_nodes$protein_ids)
length(vertex_names)
# if show the descriptions
# if wanna see the annotation in details
functional_anno
# if show the descriptions
# if wanna see the annotation in details
functional_anno$protein_ids
# if show the descriptions
# if wanna see the annotation in details
is.na(functional_anno$protein_ids)
# if show the descriptions
# if wanna see the annotation in details
vertex_names[is.na(functional_anno$protein_ids)]
# if wanna see the annotation in details
table(unip_annotation_nodes$types)
table(protein_descriptions_nodes$types)[order(table(protein_descriptions_nodes$types))]
protein_descriptions_nodes
protein_descriptions_nodes$types
# if wanna see the annotation in details
table(unip_annotation_nodes$types)
annotation
annotation
lapply(annotation, function(vec) {
grep("sequence_mapped", x = vec)
})
lapply(annotation, function(vec) {
vec[!grep("sequence_mapped", x = vec)]
})
vec[!grep("sequence_mapped", x = vec, value = T)]
lapply(annotation, function(vec) {
vec[!grep("sequence_mapped", x = vec, value = T)]
})
lapply(annotation, function(vec) {
vec[-grep("sequence_mapped", x = vec)]
})
lapply(annotation, function(vec) {
vec[grep("sequence_mapped", x = vec)]
})
lapply(annotation, function(vec) {
vec[!grepl("sequence_mapped", x = vec)]
})
lapply(annotation, function(vec) {
vec[!grepl("Generated via", x = vec)]
})
test <- lapply(annotation, function(vec) {
vec_for_further_removal <- vec[!grepl("Generated via", x = vec)]
#vec_for_further_removal[!grepl("Generated via", x = vec_for_further_removal)]
})
lapply(test, function(vec) {
vec[grepl("at[0-9]g", x = vec, ignore.case = T)]
})
lapply(test, function(vec) {
gsub(pattern = "\[.*\]", "",  vec)
})
lapply(test, function(vec) {
gsub(pattern = "\\[.*\\]", "",  vec)
})
lapply(test, function(vec) {
res <- gsub(pattern = "\\[.*\\]", "",  vec)
unique(res)
})
lapply(test, function(vec) {
res <- gsub(pattern = " \\[.*\\]", "",  vec)
unique(res)
})
lapply(test, function(vec) {
res <- gsub(pattern = "\\[.*\\]", "",  vec)
unique(res)
})
lapply(test, function(vec) {
res <- gsub(pattern = "\\[.*\\]", "",  vec)
length(unique(res))
})
lapply(test, function(vec) {
res <- gsub(pattern = "\\[.*\\]", "",  vec)
unique(res)[length(unique(res)) == 2]
})
lapply(test, function(vec) {
res <- gsub(pattern = "\\[.*\\]", "",  vec)
res <- gsub(pattern = " $", "",  res)
unique(res)
})
lapply(annotation, function(vec) {
vec_for_further_removal <- vec[!grepl("Generated via", x = vec)]
res <- gsub(pattern = "\\[.*\\]", "",  vec_for_further_removal)
res <- gsub(pattern = " $", "",  res)
unique(res)
})
annotation_list <- tapply(protein_descriptions_nodes$description, INDEX = protein_descriptions_nodes$protein_ids, unique)
rearranged_anno_list <- annotation_list[match(vertex_names, names(annotation_list))]
annotation_list_ready_to_paste <- lapply(rearranged_anno_list, function(vec) {
vec_for_further_removal <- vec[!grepl("Generated via", x = vec)]
res <- gsub(pattern = "\\[.*\\]", "",  vec_for_further_removal)
res <- gsub(pattern = " $", "",  res)
unique(res)
})
names(annotation_list_ready_to_paste)
list(names(annotation_list_ready_to_paste),annotation_list_ready_to_paste)
paste(annotation_list_ready_to_paste)
paste(names(annotation_list_ready_to_paste), annotation_list_ready_to_paste)
paste(names(annotation_list_ready_to_paste), annotation_list_ready_to_paste, sep = ";")
paste(names(annotation_list_ready_to_paste), annotation_list_ready_to_paste, sep = ": ")
annotation_list <- tapply(protein_descriptions_nodes$description, INDEX = protein_descriptions_nodes$protein_ids, unique)
rearranged_anno_list <- annotation_list[match(vertex_names, names(annotation_list))]
annotation_list_ready_to_paste <- lapply(rearranged_anno_list, function(vec) {
vec_for_further_removal <- vec[!grepl("Generated via", x = vec)]
res <- gsub(pattern = "\\[.*\\]", "",  vec_for_further_removal)
res <- gsub(pattern = " $", "",  res)
unique(res)
})
annotation <- paste(names(annotation_list_ready_to_paste), annotation_list_ready_to_paste, sep = ": ")
betw_centralities <- map_a_to_b(betw_centralities, names(betw_centralities), vertex_names)
btwness <- as.numeric(betw_centralities)*100
btwness[btwness < 1] <- 0.1
nodes <- cbind.data.frame(vertex_names,  group = g_membership, annotation = annotation, btwness)
# make the links
links <- interactions[, c(1, 2, 4)][interactions$weights > cutoff, ]
links$pot_proteins <- match(links$pot_proteins, vertex_names) - 1
links$tar_proteins <- match(links$tar_proteins, vertex_names) - 1
links$weights <- links$weights / 200
# set the calls for forceNetwork
force_net <- forceNetwork(
# data frame inputs
Links = links,  # linkage dataframe
Nodes = nodes,  # the characters of the nodes
# explanatory inputs:
Source = "pot_proteins",  # source of the linkages
Target = "tar_proteins",  #  targets of the linkages
Value = "weights",  # thickness of the edges in the graph
NodeID = "annotation",  # text shown in the nodes
Group = "group",  # groups of the nodes
Nodesize = "btwness" ,
# aesthetics inputs:
fontFamily="Arial",
fontSize = 10,
linkColour="black",
# colourScale,
# linkWidth,
charge = -13, # how strong the nodes should gather or repel to each other
opacity = 0.9,
legend=T,
arrows=T,
bounded=F,  # whether turn on the boundaries for the plots
# opacityNoHover=10, # the degree of opacity when the mouse is not suspending on the nodes
zoom = T  # allow zoom(double click to )
)
library(networkD3)
library(htmlwidgets)
tubular_paste <- function(lists_of_tubulars, separation = "; ") {
paste_df <- as.data.frame(lists_of_tubulars)
results <- do.call(paste, c(paste_df, sep= separation))
return(results)
}
# if show the descriptions
annotation_list <- tapply(protein_descriptions_nodes$description, INDEX = protein_descriptions_nodes$protein_ids, unique)
rearranged_anno_list <- annotation_list[match(vertex_names, names(annotation_list))]
annotation_list_ready_to_paste <- lapply(rearranged_anno_list, function(vec) {
vec_for_further_removal <- vec[!grepl("Generated via", x = vec)]
res <- gsub(pattern = "\\[.*\\]", "",  vec_for_further_removal)
res <- gsub(pattern = " $", "",  res)
unique(res)
})
annotation <- paste(names(annotation_list_ready_to_paste), annotation_list_ready_to_paste, sep = ": ")
# if wanna see the annotation in details
# table(unip_annotation_nodes$types)
# uniprot_anno_category <- "Function_Annotation"
# functional_anno <- unip_annotation_nodes[unip_annotation_nodes$types == uniprot_anno_category, ]
# functional_anno <- map_a_to_b(a = functional_anno, ind_a = functional_anno$protein_ids, ind_b = vertex_names)
# annotation <- tubular_paste(list(vertex_names, functional_anno$comments))
betw_centralities <- map_a_to_b(betw_centralities, names(betw_centralities), vertex_names)
btwness <- as.numeric(betw_centralities)*100
btwness[btwness < 1] <- 0.1
nodes <- cbind.data.frame(vertex_names,  group = g_membership, annotation = annotation, btwness)
# make the links
links <- interactions[, c(1, 2, 4)][interactions$weights > cutoff, ]
links$pot_proteins <- match(links$pot_proteins, vertex_names) - 1
links$tar_proteins <- match(links$tar_proteins, vertex_names) - 1
links$weights <- links$weights / 200
# set the calls for forceNetwork
force_net <- forceNetwork(
# data frame inputs
Links = links,  # linkage dataframe
Nodes = nodes,  # the characters of the nodes
# explanatory inputs:
Source = "pot_proteins",  # source of the linkages
Target = "tar_proteins",  #  targets of the linkages
Value = "weights",  # thickness of the edges in the graph
NodeID = "annotation",  # text shown in the nodes
Group = "group",  # groups of the nodes
Nodesize = "btwness" ,
# aesthetics inputs:
fontFamily="Arial",
fontSize = 10,
linkColour="black",
# colourScale,
# linkWidth,
charge = -13, # how strong the nodes should gather or repel to each other
opacity = 0.9,
legend=T,
arrows=T,
bounded=F,  # whether turn on the boundaries for the plots
# opacityNoHover=10, # the degree of opacity when the mouse is not suspending on the nodes
zoom = T  # allow zoom(double click to )
)
force_net
mapped_membership
universe_labels
table(universe_labels)[order(table(universe_labels), decreasing = T)]
mapped_membership ==1
universe_labels[mapped_membership == 1]
table(universe_labels[mapped_membership == 1])
unip_anno
# 'bind' key word:
bind_results <- unip_annotation_nodes[grep(pattern = "bind", ignore.case = T, x = unip_annotation_nodes$comments), ]
binding_pro_ids <- unique(bind_results$protein_ids)
bind_results$comments
# 'regulat.*' key words
regulat_results <- unip_annotation_nodes[grep(pattern = "regulat", ignore.case = T, x = unip_annotation_nodes$comments), ]
regulat_pro_ids <- unique(regulat_results$protein_ids)
regulat_results
go_annotation_nodes$go_terms == "GO:0003700"
sum(go_annotation_nodes$go_terms == "GO:0003700")
go_annotation_nodes$go_terms
go_annotation_nodes$protein_ids[go_annotation_nodes$go_terms == "GO:0003700"] # transcriptinal regulation activity
go_annotation_nodes$protein_ids
go_annotation_nodes$go_terms == "GO:0003700"
go_annotation_nodes$go_terms
"GO:0003700" %in% go_annotation_nodes$go_terms
"GO:0051252" %in% go_annotation_nodes$go_terms
go_annotation_nodes$protein_ids[go_annotation_nodes$go_terms == "GO:0051252"] # transcriptinal regulation activity
go_annotation_nodes$protein_ids
go_annotation_nodes$go_terms
go_annotation_nodes$protein_ids[go_annotation_nodes$go_terms == "GO:0051252"] # transcriptinal regulation activity
sum(go_annotation_nodes$go_terms == "GO:0051252")
go_annotation_nodes$go_terms == "GO:0051252"
sum(T,T,T,F)
unique(go_annotation_nodes$go_terms == "GO:0051252")
go_annotation_nodes[is.na(go_annotation_nodes$go_terms == "GO:0051252"), ]
go_annotation_nodes$protein_ids[go_annotation_nodes$go_terms == "GO:0051252"] # transcriptinal regulation activity
"GO:0140110" %in% go_annotation_nodes$go_terms
go_annotation_nodes$protein_ids[go_annotation_nodes$go_terms == "GO:0140110"] # transcriptinal regulation activity
go_annotation_nodes$protein_ids[go_annotation_nodes$go_terms == "GO:0051252"] # transcriptinal regulation activity
go_annotation_nodes$protein_ids[go_annotation_nodes$go_terms == "GO:0140110"] # transcriptinal regulation activity
tf_genes <- go_annotation_nodes$protein_ids[go_annotation_nodes$go_terms == "GO:0140110"] # transcription regulator activity
tf_genes[!is.na(tf_genes)]
tf_genes <- go_annotation_nodes$protein_ids[go_annotation_nodes$go_terms == "GO:0140110"] # transcription regulator activity
tf_genes <- tf_genes[!is.na(tf_genes)]
v_shapes <- c("circle",  "square")[(vertex_names %in% tf_genes) +1]
plot(g, vertex.shape = v_shapes,
vertex.color=col_for_cluster[membership],
vertex.color=col_for_cluster[g_membership],
vertex.size = 7,
vertex.label=NA)
col_for_cluster
col_for_cluster[membership]
col_for_cluster
membership
plot(g, vertex.shape = v_shapes,
vertex.color=col_for_cluster[g_membership],
vertex.size = 7,
vertex.label=NA)
